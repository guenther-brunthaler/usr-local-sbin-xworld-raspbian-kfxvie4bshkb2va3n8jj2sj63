#! /bin/sh
exit_version() {
	cat << EOF; exit
$APP Version 2016.277

Copyright (c) 2016 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
EOF
}
APP=${0##*/}

exit_help() {
	cat << EOF && exit_version # Width of help text: 66 colums.
Usage: $APP [ <options> ... ]	

This script changes the screen resolution "on the fly" (i. e.
without modifying /boot/config.txt or rebooting) on the Raspberry
Pi single-board computer.

It also resizes the framebuffer to match the new display
dimensions, and ensures the new frame buffer contents are also
immediately visible on-screen (i. e. no need to switch the
console).

This script is actually two scripts in one and does different
things depending under which name it is called. Create a symlink
to allow the user call it under both names.

In both cases, it queries the EDID info of the currently
connected monitor and selects a display mode depending on the
script's name, switches the monitor to this display mode, and
then resizes the framebuffer device to match the mode's width and
height.

If the script's name contains the substring "-vga-", it selects
the "most compatible" mode of your monitor, i. e. a mode with 640
x 480 pixels, and the one with the least Hz, but still prefers
progressive over interlaced modes.

If the script's name contains the substring "-native-", it
selects the monitor's preferred mode, which is usually the native
resolution in case of pixel-based (such as LCD) rather than
analog CRT output devices.

The idea is to switch to VGA resolution first, then unplug the
current monitor and plug in a different monitor.

Because every monitor can display VGA, the new monitor should
still be able to display something. Otherwise just repeat the
last command, switching the newly plugged monitor to VGA in any
case.

Finally run the script with "-native-" in its name to switch to
the preferred resolution of the newly plugged monitor.

Supported options:

-h: Display this help.
-V: Just display the following version info.

EOF
}

set -e
cleanup() {
	rc=$?
	if test -n "$helper"
	then
		kill $helper || :
		wait $helper || :
	fi
	test -n "$enum" && rm -- "$enum"
	test $rc = 0 || echo "$0 failed!" >& 2
}
helper=
enum=
trap cleanup 0
trap 'exit $?' INT TERM HUP QUIT

while getopts Vh opt
do
	case $opt in
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

case $0 in
	*-native-*) compatibility=false;;
	*-vga-*) compatibility=true;;
	*) false || exit # Bad name of the script!
esac

export LC_ALL=C
tv=/usr/bin/tvservice
test -f "$tv"

groups=`"$tv" -h | sed 's/.*--explicit.*(\([^)]*\)).*/\1/; t 1; d; :1 s/,//g'`
test -n "$groups"

while :
do
	t=`mktemp -u "${TMPDIR:-/tmp}/$APP.XXXXXXXXXX"`
	mkfifo -m 700 -- "$t" && break
done
enum=$t

parse() {
	local t
	t=${text#"$1"}
	test x"$t" != x"$text" || return
	text=$t
}

parse1WS() {
	parse "$HT" || parse ' '
}
HT=`printf '\t:'`; HT=${HT%:}

skipWS() {
	while parse1WS
	do
		:
	done
}

parseWS() {
	parse1WS; skipWS
}

parse_uint() {
	local char rest
	value=
	while :
	do
		case $text in
			[0-9]*) ;;
			*) break
		esac
		rest=${text#?}
		char=${text%"$rest"}
		text=$rest
		value=$value$char
		test ${#value} = 1 && test 0 = "$char" && break
	done
}

m=
for group in $groups
do
	"$tv" -m $group > "$enum" 2> /dev/null || : & helper=$!
	# Parse lines like the following one:
	#
	# (prefer) mode 35: 1280x1024 @ 60Hz 5:4, clock:108MHz progressive
	while read -r text
	do
		if parse '(prefer)'
		then
			matching=true
			parseWS
		else
			matching=false
		fi
		$compatibility && matching=false
		parse 'mode' || continue
		parseWS
		parse_uint; mode=$value
		parse ':'; skipWS
		parse_uint; width=$value
		parse 'x'
		parse_uint; height=$value
		skipWS; parse '@'; skipWS
		parse_uint; hz=$value; parse 'Hz'
		case $text in
			*progressive*) quality=1;;
			*) quality=0
		esac
		if
			$compatibility \
			&& test 640 = "$width" && test 480 = "$height"
		then
			matching=true
		fi
		$matching || continue
		# Find matching mode with best quality and least Hz.
		test -n "$m" && {
			test $quality -gt $best_quality || {
				test $quality = $best_quality \
				&& test $hz -lt $best_hz
			}
		} && m=
		test -n "$m" && continue
		best_quality=$quality; best_hz=$hz
		g=$group; m=$mode; w=$width; h=$height
	done < "$enum"
	t=$helper; helper=; wait $t
done
test -n "$m"
echo "Switching to HDMI group $g mode $m ($w x $h pixels, $best_hz Hz)"
if $compatibility
then
	d=8 # VGA uses only 16 colors, so d=1 or d=2. But the minimum is 8.
else
	d=24
fi
case $d in
	8) nd=16;;
	*) nd=8
esac
/usr/bin/tvservice -e "$g $m"
fbset -a -g $w $h $w $h $nd
sleep 1
fbset -a -depth $d
